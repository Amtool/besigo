/*
 * copyright(c) 2015 Hajime UCHIMURA.
 * do not remove these text.
 * please contact before business use.
 */

#include <assert.h>
#include <vector>

#ifndef __COLOR3_H
#define __COLOR3_H


// 3-banded color spectrum.
namespace COLOR3 {

  class Color3;
  Color3 color_clip( const Color3& c );
  Color3 lrgb_to_srgb( const Color3& lrgb ); // リニアRGB>sRGB変換. 値域は0..1を想定.
  Color3 srgb_to_lrgb( const Color3& srgb ); // sRGB>リニアRGB変換. 値域は0..1を想定.
  Color3 lrgb_to_xyz ( const Color3& lrgb );
  Color3 xyz_to_lrgb ( const Color3& xyy  );
  Color3 lrgb_to_xyy ( const Color3& lrgb );
  Color3 xyy_to_lrgb ( const Color3& xyy  );
  Color3 xyz_to_xyy  ( const Color3& xyz  );
  Color3 xyy_to_xyz  ( const Color3& xyy  );

  typedef enum {
    XYZ,XYY,RGB,sRGB,UNKNOWN
  } COLORSPACE;

  
  class Color3 {

  public:
    
    COLORSPACE space_; // 色空間.
    double a_, b_, c_; // xyyやらxyzやらrgbやら...

    Color3( ){ space_ = UNKNOWN; }
    Color3( COLORSPACE space, double a, double b, double c ) {
      set( space, a, b, c );
    }
    void set( COLORSPACE space, double a, double b, double c ) {
      space_ = space;
      a_ = a;
      b_ = b;
      c_ = c;
    }
    
    bool is_saturated( void ){
      return (a_ >= 1.f) || (a_ < 0.f) || (b_ >= 1.f) || (b_ < 0.f) || (c_ >= 1.f) || (c_ < 0.f) ;
    }
    
    Color3 get( COLORSPACE space ) const {
      switch( space_ ){
      case XYZ:{
        switch( space ){
        case XYZ: {return *this;} break;
        case XYY: {return xyz_to_xyy( *this ); } break;
        case RGB: {return xyz_to_lrgb( *this ); } break;
        case sRGB:{return lrgb_to_srgb( color_clip( xyz_to_lrgb( *this ) ) ) ; } break;
        default: assert(false); break;
        } } break;
      case XYY:{
        switch( space ){
        case XYZ: {return xyy_to_xyz( *this );} break;
        case XYY: {return *this;} break;
        case RGB: {return xyy_to_lrgb( *this );} break;
        case sRGB:{return lrgb_to_srgb( color_clip( xyy_to_lrgb( *this ) ) ); } break;
        default: assert(false); break;
        } } break;
      case RGB:{
        switch( space ){
        case XYZ: {return lrgb_to_xyz( *this );} break;
        case XYY: {return lrgb_to_xyy( *this );} break;
        case RGB: {return *this;} break;
        case sRGB:{return lrgb_to_srgb( color_clip( *this ) );} break;
        default: assert(false); break;
        } } break;
      case sRGB:{
        switch( space ){
        case XYZ: {return lrgb_to_xyz( srgb_to_lrgb( *this ) );} break;
        case XYY: {return lrgb_to_xyy( srgb_to_lrgb( *this ) );} break;
        case RGB: {return srgb_to_lrgb( *this );} break;
        case sRGB:{return *this;} break;
        default: assert(false); break;
        } } break;
      default:
        assert(false);
        break;
      }
      return Color3();
    }
  } ;
  
  double square_error( const Color3& a, const Color3& b ){
    double d1 = (a.a_ - b.a_);
    double d2 = (a.b_ - b.b_);
    double d3 = (a.c_ - b.c_);
    return d1*d1 + d2*d2 + d3*d3;
  }
  
  Color3 color_clip( const Color3& c ){
    Color3 ret;
    ret.a_ = (c.a_ > 1.f) ? 1.f : ((c.a_ < 0.f) ? 0.f : c.a_);
    ret.b_ = (c.b_ > 1.f) ? 1.f : ((c.b_ < 0.f) ? 0.f : c.b_);
    ret.c_ = (c.c_ > 1.f) ? 1.f : ((c.c_ < 0.f) ? 0.f : c.c_);
    ret.space_ = c.space_;
    return ret;
  }

  // リニアRGB>sRGB変換. 値域は0..1を想定.
  Color3 lrgb_to_srgb( const Color3& lrgb ){
    // http://www.motorwarp.com/koizumi/srgb.html
    Color3 ret;
    ret.a_ = ( lrgb.a_ < 0.0031308f ) ? lrgb.a_ * 12.92 : ( 1.055 * pow( lrgb.a_ , 1.0 / 2.4 ) - 0.055 );
    ret.b_ = ( lrgb.b_ < 0.0031308f ) ? lrgb.b_ * 12.92 : ( 1.055 * pow( lrgb.b_ , 1.0 / 2.4 ) - 0.055 );
    ret.c_ = ( lrgb.c_ < 0.0031308f ) ? lrgb.c_ * 12.92 : ( 1.055 * pow( lrgb.c_ , 1.0 / 2.4 ) - 0.055 );
    ret.space_ = sRGB;
    return ret;
  }

  // sRGB>リニアRGB変換. 値域は0..1を想定.
  Color3 srgb_to_lrgb( const Color3& srgb ){
    // http://www.motorwarp.com/koizumi/srgb.html
    Color3 ret;
    ret.a_ = ( srgb.a_ < 0.04045f ) ? srgb.a_ / 12.92 : pow( (srgb.a_ + 0.055) / 1.055 , 2.4 );
    ret.b_ = ( srgb.b_ < 0.04045f ) ? srgb.b_ / 12.92 : pow( (srgb.b_ + 0.055) / 1.055 , 2.4 );
    ret.c_ = ( srgb.c_ < 0.04045f ) ? srgb.c_ / 12.92 : pow( (srgb.c_ + 0.055) / 1.055 , 2.4 );
    ret.space_ = RGB;
    return ret;
  }

  Color3 lrgb_to_xyz( const Color3& lrgb ){
    Color3 ret;
    double r,g,b;

    r = lrgb.a_;
    g = lrgb.b_;
    b = lrgb.c_;

    double mat[] = {

      // NTSC RGB with C light.
      /*
    0.6068909, 0.1735011, 0.2003480,
    0.2989164, 0.5865990, 0.1144845,
    0.0000000, 0.0660957, 1.1162243,
       */
      // sRGB D65
      0.4124564, 0.3575761, 0.1804375,
      0.2126729, 0.7151522, 0.0721750,
      0.0193339, 0.1191920, 0.9503041,
    };
    
    ret.a_ = mat[0] * r + mat[1] * g + mat[2] * b;
    ret.b_ = mat[3] * r + mat[4] * g + mat[5] * b;
    ret.c_ = mat[6] * r + mat[7] * g + mat[8] * b;
    ret.space_ = XYZ;
    
    return ret;
  }

  Color3 xyz_to_lrgb( const Color3& xyy ){
    Color3 ret;
    double x,y,z;
    double mat[] = {

      // NTSC RGB with C light.
      /*1.9099961, -0.5324542, -0.2882091,
    -0.9846663, 1.9991710, -0.0283082,
    0.0583056, -0.1183781,  0.8975535,*/
      // sRGB D65
      3.2404542,-1.5371385,-0.4985314,
      -0.9692660, 1.8760108, 0.0415560,
      0.0556434,-0.2040259, 1.0572252
      };

    x = xyy.a_;
    y = xyy.b_;
    z = xyy.c_;

    ret.a_ = mat[0] * x + mat[1] * y + mat[2] * z;
    ret.b_ = mat[3] * x + mat[4] * y + mat[5] * z;
    ret.c_ = mat[6] * x + mat[7] * y + mat[8] * z;
    ret.space_ = RGB;
    return ret;
  }

  Color3 lrgb_to_xyy( const Color3& lrgb ){
    Color3 xyy = lrgb_to_xyz( lrgb );
    Color3 ret;
    ret.a_ = xyy.a_ / ( xyy.a_ + xyy.b_ + xyy.c_ );
    ret.b_ = xyy.b_ / ( xyy.a_ + xyy.b_ + xyy.c_ );
    ret.c_ = xyy.b_;
    ret.space_ = XYY;
    return ret;
  }

  Color3 xyy_to_lrgb( const Color3& xyy ){
    Color3 ret;
    ret.a_ = xyy.a_ * xyy.c_ / xyy.b_;
    ret.b_ = xyy.c_;
    ret.c_ = (1.f - xyy.a_ - xyy.b_ ) * xyy.c_ / xyy.b_;
    ret.space_ = RGB;
    return xyz_to_lrgb( ret );
  }

  Color3 xyz_to_xyy( const Color3& xyz ){
    Color3 ret;
    ret.a_ = xyz.a_ / ( xyz.a_ + xyz.b_ + xyz.c_ );
    ret.b_ = xyz.b_ / ( xyz.a_ + xyz.b_ + xyz.c_ );
    ret.c_ = xyz.b_;
    ret.space_ = XYY;
    return ret;
  }

  Color3 xyy_to_xyz( const Color3& xyy ){
    Color3 ret;
    ret.a_ = xyy.a_ * xyy.c_ / xyy.b_;
    ret.b_ = xyy.c_;
    ret.c_ = (1.f - xyy.a_ - xyy.b_ ) * xyy.c_ / xyy.b_;
    ret.space_ = XYZ;
    return ret;
  }
} // namespace COLOR3

// multispectrum colors.
namespace SPECTRUM {

  typedef std::vector<double> Spectrum;

  // 380-780.
  double CIE_D65[] = {49.9755,50.4428,50.91,51.3773,51.8446,52.3118,52.7791,53.2464,53.7137,54.1809,54.6482,57.4589,60.2695,63.0802,65.8909,68.7015,71.5122,74.3229,77.1336,79.9442,82.7549,83.628,84.5011,85.3742,86.2473,87.1204,87.9936,88.8667,89.7398,90.6129,91.486,91.6806,91.8752,92.0697,92.2643,92.4589,92.6535,92.8481,93.0426,93.2372,93.4318,92.7568,92.0819,91.4069,90.732,90.057,89.3821,88.7071,88.0322,87.3572,86.6823,88.5006,90.3188,92.1371,93.9554,95.7736,97.5919,99.4102,101.228,103.047,104.865,106.079,107.294,108.508,109.722,110.936,112.151,113.365,114.579,115.794,117.008,117.088,117.169,117.249,117.33,117.41,117.49,117.571,117.651,117.732,117.812,117.517,117.222,116.927,116.632,116.336,116.041,115.746,115.451,115.156,114.861,114.967,115.073,115.18,115.286,115.392,115.498,115.604,115.711,115.817,115.923,115.212,114.501,113.789,113.078,112.367,111.656,110.945,110.233,109.522,108.811,108.865,108.92,108.974,109.028,109.082,109.137,109.191,109.245,109.3,109.354,109.199,109.044,108.888,108.733,108.578,108.423,108.268,108.112,107.957,107.802,107.501,107.2,106.898,106.597,106.296,105.995,105.694,105.392,105.091,104.79,105.08,105.37,105.66,105.95,106.239,106.529,106.819,107.109,107.399,107.689,107.361,107.032,106.704,106.375,106.047,105.719,105.39,105.062,104.733,104.405,104.369,104.333,104.297,104.261,104.225,104.19,104.154,104.118,104.082,104.046,103.641,103.237,102.832,102.428,102.023,101.618,101.214,100.809,100.405,100,99.6334,99.2668,98.9003,98.5337,98.1671,97.8005,97.4339,97.0674,96.7008,96.3342,96.2796,96.225,96.1703,96.1157,96.0611,96.0065,95.9519,95.8972,95.8426,95.788,95.0778,94.3675,93.6573,92.947,92.2368,91.5266,90.8163,90.1061,89.3958,88.6856,88.8177,88.9497,89.0818,89.2138,89.3459,89.478,89.61,89.7421,89.8741,90.0062,89.9655,89.9248,89.8841,89.8434,89.8026,89.7619,89.7212,89.6805,89.6398,89.5991,89.4091,89.219,89.029,88.8389,88.6489,88.4589,88.2688,88.0788,87.8887,87.6987,87.2577,86.8167,86.3757,85.9347,85.4936,85.0526,84.6116,84.1706,83.7296,83.2886,83.3297,83.3707,83.4118,83.4528,83.4939,83.535,83.576,83.6171,83.6581,83.6992,83.332,82.9647,82.5975,82.2302,81.863,81.4958,81.1285,80.7613,80.394,80.0268,80.0456,80.0644,80.0831,80.1019,80.1207,80.1395,80.1583,80.177,80.1958,80.2146,80.4209,80.6272,80.8336,81.0399,81.2462,81.4525,81.6588,81.8652,82.0715,82.2778,81.8784,81.4791,81.0797,80.6804,80.281,79.8816,79.4823,79.0829,78.6836,78.2842,77.4279,76.5716,75.7153,74.859,74.0027,73.1465,72.2902,71.4339,70.5776,69.7213,69.9101,70.0989,70.2876,70.4764,70.6652,70.854,71.0428,71.2315,71.4203,71.6091,71.8831,72.1571,72.4311,72.7051,72.979,73.253,73.527,73.801,74.075,74.349,73.0745,71.8,70.5255,69.251,67.9765,66.702,65.4275,64.153,62.8785,61.604,62.4322,63.2603,64.0885,64.9166,65.7448,66.573,67.4011,68.2293,69.0574,69.8856,70.4057,70.9259,71.446,71.9662,72.4863,73.0064,73.5266,74.0467,74.5669,75.087,73.9376,72.7881,71.6387,70.4893,69.3398,68.1904,67.041,65.8916,64.7421,63.5927,61.8752,60.1578,58.4403,56.7229,55.0054,53.288,51.5705,49.8531,48.1356,46.4182,48.4569,50.4956,52.5344,54.5731,56.6118,58.6505,60.6892,62.728,64.7667,66.8054,66.4631,66.1209,65.7786,65.4364,65.0941,64.7518,64.4096,64.0673,63.7251,63.3828,};
  double CIE_A[]   = {9.7951,10.0096,10.2273,10.4481,10.6722,10.8996,11.1302,11.364,11.6012,11.8416,12.0853,12.3324,12.5828,12.8366,13.0938,13.3543,13.6182,13.8855,14.1563,14.4304,14.708,14.9891,15.2736,15.5616,15.853,16.148,16.4464,16.7484,17.0538,17.3628,17.6753,17.9913,18.3108,18.6339,18.9605,19.2907,19.6244,19.9617,20.3026,20.647,20.995,21.3465,21.7016,22.0603,22.4225,22.7883,23.1577,23.5307,23.9072,24.2873,24.6709,25.0581,25.4489,25.8432,26.2411,26.6425,27.0475,27.456,27.8681,28.2836,28.7027,29.1253,29.5515,29.9811,30.4142,30.8508,31.2909,31.7345,32.1815,32.632,33.0859,33.5432,34.004,34.4682,34.9358,35.4068,35.8811,36.3588,36.8399,37.3243,37.8121,38.3031,38.7975,39.2951,39.796,40.3002,40.8076,41.3182,41.832,42.3491,42.8693,43.3926,43.9192,44.4488,44.9816,45.5174,46.0563,46.5983,47.1433,47.6913,48.2423,48.7963,49.3533,49.9132,50.476,51.0418,51.6104,52.1818,52.7561,53.3332,53.9132,54.4958,55.0813,55.6694,56.2603,56.8539,57.4501,58.0489,58.6504,59.2545,59.8611,60.4703,61.082,61.6962,62.3128,62.932,63.5535,64.1775,64.8038,65.4325,66.0635,66.6968,67.3324,67.9702,68.6102,69.2525,69.8969,70.5435,71.1922,71.843,72.4959,73.1508,73.8077,74.4666,75.1275,75.7903,76.4551,77.1217,77.7902,78.4605,79.1326,79.8065,80.4821,81.1595,81.8386,82.5193,83.2017,83.8856,84.5712,85.2584,85.947,86.6372,87.3288,88.0219,88.7165,89.4124,90.1097,90.8083,91.5082,92.2095,92.912,93.6157,94.3206,95.0267,95.7339,96.4423,97.1518,97.8623,98.5739,99.2864,100,100.715,101.43,102.146,102.864,103.582,104.301,105.02,105.741,106.462,107.184,107.906,108.63,109.354,110.078,110.803,111.529,112.255,112.982,113.709,114.436,115.164,115.893,116.622,117.351,118.08,118.81,119.54,120.27,121.001,121.731,122.462,123.193,123.924,124.655,125.386,126.118,126.849,127.58,128.312,129.043,129.774,130.505,131.236,131.966,132.697,133.427,134.157,134.887,135.617,136.346,137.075,137.804,138.532,139.26,139.988,140.715,141.441,142.167,142.893,143.618,144.343,145.067,145.79,146.513,147.235,147.957,148.678,149.398,150.117,150.836,151.554,152.271,152.988,153.704,154.418,155.132,155.845,156.558,157.269,157.979,158.689,159.397,160.104,160.811,161.516,162.221,162.924,163.626,164.327,165.028,165.726,166.424,167.121,167.816,168.51,169.203,169.895,170.586,171.275,171.963,172.65,173.335,174.019,174.702,175.383,176.063,176.741,177.419,178.094,178.769,179.441,180.113,180.783,181.451,182.118,182.783,183.447,184.109,184.77,185.429,186.087,186.743,187.397,188.05,188.701,189.35,189.998,190.644,191.288,191.931,192.572,193.211,193.849,194.484,195.118,195.75,196.381,197.009,197.636,198.261,198.884,199.506,200.125,200.743,201.359,201.972,202.584,203.195,203.803,204.409,205.013,205.616,206.216,206.815,207.411,208.006,208.599,209.189,209.778,210.365,210.949,211.532,212.112,212.691,213.268,213.842,214.415,214.985,215.553,216.12,216.684,217.246,217.806,218.364,218.92,219.473,220.025,220.574,221.122,221.667,222.21,222.751,223.29,223.826,224.361,224.893,225.423,225.951,226.477,227,227.522,228.041,228.558,229.073,229.585,230.096,230.604,231.11,231.614,232.115,232.615,233.112,233.606,234.099,234.589,235.078,235.564,236.047,236.529,237.008,237.485,237.959,238.432,238.902,239.37,239.836,240.299,240.76,241.219,241.675,};

  typedef struct {
    int lambda;
    double x_,y_,z_;
  } CIEXYZ;

  CIEXYZ CIE_XYZ31_sum = {-1,0,0,0};
  CIEXYZ CIE_XYZ31[] = {
    {380,0.001368000000,0.000039000000,0.006450001000},
    {381,0.001502050000,0.000042826400,0.007083216000},
    {382,0.001642328000,0.000046914600,0.007745488000},
    {383,0.001802382000,0.000051589600,0.008501152000},
    {384,0.001995757000,0.000057176400,0.009414544000},
    {385,0.002236000000,0.000064000000,0.010549990000},
    {386,0.002535385000,0.000072344210,0.011965800000},
    {387,0.002892603000,0.000082212240,0.013655870000},
    {388,0.003300829000,0.000093508160,0.015588050000},
    {389,0.003753236000,0.000106136100,0.017730150000},
    {390,0.004243000000,0.000120000000,0.020050010000},
    {391,0.004762389000,0.000134984000,0.022511360000},
    {392,0.005330048000,0.000151492000,0.025202880000},
    {393,0.005978712000,0.000170208000,0.028279720000},
    {394,0.006741117000,0.000191816000,0.031897040000},
    {395,0.007650000000,0.000217000000,0.036210000000},
    {396,0.008751373000,0.000246906700,0.041437710000},
    {397,0.010028880000,0.000281240000,0.047503720000},
    {398,0.011421700000,0.000318520000,0.054119880000},
    {399,0.012869010000,0.000357266700,0.060998030000},
    {400,0.014310000000,0.000396000000,0.067850010000},
    {401,0.015704430000,0.000433714700,0.074486320000},
    {402,0.017147440000,0.000473024000,0.081361560000},
    {403,0.018781220000,0.000517876000,0.089153640000},
    {404,0.020748010000,0.000572218700,0.098540480000},
    {405,0.023190000000,0.000640000000,0.110200000000},
    {406,0.026207360000,0.000724560000,0.124613300000},
    {407,0.029782480000,0.000825500000,0.141701700000},
    {408,0.033880920000,0.000941160000,0.161303500000},
    {409,0.038468240000,0.001069880000,0.183256800000},
    {410,0.043510000000,0.001210000000,0.207400000000},
    {411,0.048995600000,0.001362091000,0.233692100000},
    {412,0.055022600000,0.001530752000,0.262611400000},
    {413,0.061718800000,0.001720368000,0.294774600000},
    {414,0.069212000000,0.001935323000,0.330798500000},
    {415,0.077630000000,0.002180000000,0.371300000000},
    {416,0.086958110000,0.002454800000,0.416209100000},
    {417,0.097176720000,0.002764000000,0.465464200000},
    {418,0.108406300000,0.003117800000,0.519694800000},
    {419,0.120767200000,0.003526400000,0.579530300000},
    {420,0.134380000000,0.004000000000,0.645600000000},
    {421,0.149358200000,0.004546240000,0.718483800000},
    {422,0.165395700000,0.005159320000,0.796713300000},
    {423,0.181983100000,0.005829280000,0.877845900000},
    {424,0.198611000000,0.006546160000,0.959439000000},
    {425,0.214770000000,0.007300000000,1.039050100000},
    {426,0.230186800000,0.008086507000,1.115367300000},
    {427,0.244879700000,0.008908720000,1.188497100000},
    {428,0.258777300000,0.009767680000,1.258123300000},
    {429,0.271807900000,0.010664430000,1.323929600000},
    {430,0.283900000000,0.011600000000,1.385600000000},
    {431,0.294943800000,0.012573170000,1.442635200000},
    {432,0.304896500000,0.013582720000,1.494803500000},
    {433,0.313787300000,0.014629680000,1.542190300000},
    {434,0.321645400000,0.015715090000,1.584880700000},
    {435,0.328500000000,0.016840000000,1.622960000000},
    {436,0.334351300000,0.018007360000,1.656404800000},
    {437,0.339210100000,0.019214480000,1.685295900000},
    {438,0.343121300000,0.020453920000,1.709874500000},
    {439,0.346129600000,0.021718240000,1.730382100000},
    {440,0.348280000000,0.023000000000,1.747060000000},
    {441,0.349599900000,0.024294610000,1.760044600000},
    {442,0.350147400000,0.025610240000,1.769623300000},
    {443,0.350013000000,0.026958570000,1.776263700000},
    {444,0.349287000000,0.028351250000,1.780433400000},
    {445,0.348060000000,0.029800000000,1.782600000000},
    {446,0.346373300000,0.031310830000,1.782968200000},
    {447,0.344262400000,0.032883680000,1.781699800000},
    {448,0.341808800000,0.034521120000,1.779198200000},
    {449,0.339094100000,0.036225710000,1.775867100000},
    {450,0.336200000000,0.038000000000,1.772110000000},
    {451,0.333197700000,0.039846670000,1.768258900000},
    {452,0.330041100000,0.041768000000,1.764039000000},
    {453,0.326635700000,0.043766000000,1.758943800000},
    {454,0.322886800000,0.045842670000,1.752466300000},
    {455,0.318700000000,0.048000000000,1.744100000000},
    {456,0.314025100000,0.050243680000,1.733559500000},
    {457,0.308884000000,0.052573040000,1.720858100000},
    {458,0.303290400000,0.054980560000,1.705936900000},
    {459,0.297257900000,0.057458720000,1.688737200000},
    {460,0.290800000000,0.060000000000,1.669200000000},
    {461,0.283970100000,0.062601970000,1.647528700000},
    {462,0.276721400000,0.065277520000,1.623412700000},
    {463,0.268917800000,0.068042080000,1.596022300000},
    {464,0.260422700000,0.070911090000,1.564528000000},
    {465,0.251100000000,0.073900000000,1.528100000000},
    {466,0.240847500000,0.077016000000,1.486111400000},
    {467,0.229851200000,0.080266400000,1.439521500000},
    {468,0.218407200000,0.083666800000,1.389879900000},
    {469,0.206811500000,0.087232800000,1.338736200000},
    {470,0.195360000000,0.090980000000,1.287640000000},
    {471,0.184213600000,0.094917550000,1.237422300000},
    {472,0.173327300000,0.099045840000,1.187824300000},
    {473,0.162688100000,0.103367400000,1.138761100000},
    {474,0.152283300000,0.107884600000,1.090148000000},
    {475,0.142100000000,0.112600000000,1.041900000000},
    {476,0.132178600000,0.117532000000,0.994197600000},
    {477,0.122569600000,0.122674400000,0.947347300000},
    {478,0.113275200000,0.127992800000,0.901453100000},
    {479,0.104297900000,0.133452800000,0.856619300000},
    {480,0.095640000000,0.139020000000,0.812950100000},
    {481,0.087299550000,0.144676400000,0.770517300000},
    {482,0.079308040000,0.150469300000,0.729444800000},
    {483,0.071717760000,0.156461900000,0.689913600000},
    {484,0.064580990000,0.162717700000,0.652104900000},
    {485,0.057950010000,0.169300000000,0.616200000000},
    {486,0.051862110000,0.176243100000,0.582328600000},
    {487,0.046281520000,0.183558100000,0.550416200000},
    {488,0.041150880000,0.191273500000,0.520337600000},
    {489,0.036412830000,0.199418000000,0.491967300000},
    {490,0.032010000000,0.208020000000,0.465180000000},
    {491,0.027917200000,0.217119900000,0.439924600000},
    {492,0.024144400000,0.226734500000,0.416183600000},
    {493,0.020687000000,0.236857100000,0.393882200000},
    {494,0.017540400000,0.247481200000,0.372945900000},
    {495,0.014700000000,0.258600000000,0.353300000000},
    {496,0.012161790000,0.270184900000,0.334857800000},
    {497,0.009919960000,0.282293900000,0.317552100000},
    {498,0.007967240000,0.295050500000,0.301337500000},
    {499,0.006296346000,0.308578000000,0.286168600000},
    {500,0.004900000000,0.323000000000,0.272000000000},
    {501,0.003777173000,0.338402100000,0.258817100000},
    {502,0.002945320000,0.354685800000,0.246483800000},
    {503,0.002424880000,0.371698600000,0.234771800000},
    {504,0.002236293000,0.389287500000,0.223453300000},
    {505,0.002400000000,0.407300000000,0.212300000000},
    {506,0.002925520000,0.425629900000,0.201169200000},
    {507,0.003836560000,0.444309600000,0.190119600000},
    {508,0.005174840000,0.463394400000,0.179225400000},
    {509,0.006982080000,0.482939500000,0.168560800000},
    {510,0.009300000000,0.503000000000,0.158200000000},
    {511,0.012149490000,0.523569300000,0.148138300000},
    {512,0.015535880000,0.544512000000,0.138375800000},
    {513,0.019477520000,0.565690000000,0.128994200000},
    {514,0.023992770000,0.586965300000,0.120075100000},
    {515,0.029100000000,0.608200000000,0.111700000000},
    {516,0.034814850000,0.629345600000,0.103904800000},
    {517,0.041120160000,0.650306800000,0.096667480000},
    {518,0.047985040000,0.670875200000,0.089982720000},
    {519,0.055378610000,0.690842400000,0.083845310000},
    {520,0.063270000000,0.710000000000,0.078249990000},
    {521,0.071635010000,0.728185200000,0.073208990000},
    {522,0.080462240000,0.745463600000,0.068678160000},
    {523,0.089739960000,0.761969400000,0.064567840000},
    {524,0.099456450000,0.777836800000,0.060788350000},
    {525,0.109600000000,0.793200000000,0.057250010000},
    {526,0.120167400000,0.808110400000,0.053904350000},
    {527,0.131114500000,0.822496200000,0.050746640000},
    {528,0.142367900000,0.836306800000,0.047752760000},
    {529,0.153854200000,0.849491600000,0.044898590000},
    {530,0.165500000000,0.862000000000,0.042160000000},
    {531,0.177257100000,0.873810800000,0.039507280000},
    {532,0.189140000000,0.884962400000,0.036935640000},
    {533,0.201169400000,0.895493600000,0.034458360000},
    {534,0.213365800000,0.905443200000,0.032088720000},
    {535,0.225749900000,0.914850100000,0.029840000000},
    {536,0.238320900000,0.923734800000,0.027711810000},
    {537,0.251066800000,0.932092400000,0.025694440000},
    {538,0.263992200000,0.939922600000,0.023787160000},
    {539,0.277101700000,0.947225200000,0.021989250000},
    {540,0.290400000000,0.954000000000,0.020300000000},
    {541,0.303891200000,0.960256100000,0.018718050000},
    {542,0.317572600000,0.966007400000,0.017240360000},
    {543,0.331438400000,0.971260600000,0.015863640000},
    {544,0.345482800000,0.976022500000,0.014584610000},
    {545,0.359700000000,0.980300000000,0.013400000000},
    {546,0.374083900000,0.984092400000,0.012307230000},
    {547,0.388639600000,0.987418200000,0.011301880000},
    {548,0.403378400000,0.990312800000,0.010377920000},
    {549,0.418311500000,0.992811600000,0.009529306000},
    {550,0.433449900000,0.994950100000,0.008749999000},
    {551,0.448795300000,0.996710800000,0.008035200000},
    {552,0.464336000000,0.998098300000,0.007381600000},
    {553,0.480064000000,0.999112000000,0.006785400000},
    {554,0.495971300000,0.999748200000,0.006242800000},
    {555,0.512050100000,1.000000000000,0.005749999000},
    {556,0.528295900000,0.999856700000,0.005303600000},
    {557,0.544691600000,0.999304600000,0.004899800000},
    {558,0.561209400000,0.998325500000,0.004534200000},
    {559,0.577821500000,0.996898700000,0.004202400000},
    {560,0.594500000000,0.995000000000,0.003900000000},
    {561,0.611220900000,0.992600500000,0.003623200000},
    {562,0.627975800000,0.989742600000,0.003370600000},
    {563,0.644760200000,0.986444400000,0.003141400000},
    {564,0.661569700000,0.982724100000,0.002934800000},
    {565,0.678400000000,0.978600000000,0.002749999000},
    {566,0.695239200000,0.974083700000,0.002585200000},
    {567,0.712058600000,0.969171200000,0.002438600000},
    {568,0.728828400000,0.963856800000,0.002309400000},
    {569,0.745518800000,0.958134900000,0.002196800000},
    {570,0.762100000000,0.952000000000,0.002100000000},
    {571,0.778543200000,0.945450400000,0.002017733000},
    {572,0.794825600000,0.938499200000,0.001948200000},
    {573,0.810926400000,0.931162800000,0.001889800000},
    {574,0.826824800000,0.923457600000,0.001840933000},
    {575,0.842500000000,0.915400000000,0.001800000000},
    {576,0.857932500000,0.907006400000,0.001766267000},
    {577,0.873081600000,0.898277200000,0.001737800000},
    {578,0.887894400000,0.889204800000,0.001711200000},
    {579,0.902318100000,0.879781600000,0.001683067000},
    {580,0.916300000000,0.870000000000,0.001650001000},
    {581,0.929799500000,0.859861300000,0.001610133000},
    {582,0.942798400000,0.849392000000,0.001564400000},
    {583,0.955277600000,0.838622000000,0.001513600000},
    {584,0.967217900000,0.827581300000,0.001458533000},
    {585,0.978600000000,0.816300000000,0.001400000000},
    {586,0.989385600000,0.804794700000,0.001336667000},
    {587,0.999548800000,0.793082000000,0.001270000000},
    {588,1.009089200000,0.781192000000,0.001205000000},
    {589,1.018006400000,0.769154700000,0.001146667000},
    {590,1.026300000000,0.757000000000,0.001100000000},
    {591,1.033982700000,0.744754100000,0.001068800000},
    {592,1.040986000000,0.732422400000,0.001049400000},
    {593,1.047188000000,0.720003600000,0.001035600000},
    {594,1.052466700000,0.707496500000,0.001021200000},
    {595,1.056700000000,0.694900000000,0.001000000000},
    {596,1.059794400000,0.682219200000,0.000968640000},
    {597,1.061799200000,0.669471600000,0.000929920000},
    {598,1.062806800000,0.656674400000,0.000886880000},
    {599,1.062909600000,0.643844800000,0.000842560000},
    {600,1.062200000000,0.631000000000,0.000800000000},
    {601,1.060735200000,0.618155500000,0.000760960000},
    {602,1.058443600000,0.605314400000,0.000723680000},
    {603,1.055224400000,0.592475600000,0.000685920000},
    {604,1.050976800000,0.579637900000,0.000645440000},
    {605,1.045600000000,0.566800000000,0.000600000000},
    {606,1.039036900000,0.553961100000,0.000547866700},
    {607,1.031360800000,0.541137200000,0.000491600000},
    {608,1.022666200000,0.528352800000,0.000435400000},
    {609,1.013047700000,0.515632300000,0.000383466700},
    {610,1.002600000000,0.503000000000,0.000340000000},
    {611,0.991367500000,0.490468800000,0.000307253300},
    {612,0.979331400000,0.478030400000,0.000283160000},
    {613,0.966491600000,0.465677600000,0.000265440000},
    {614,0.952847900000,0.453403200000,0.000251813300},
    {615,0.938400000000,0.441200000000,0.000240000000},
    {616,0.923194000000,0.429080000000,0.000229546700},
    {617,0.907244000000,0.417036000000,0.000220640000},
    {618,0.890502000000,0.405032000000,0.000211960000},
    {619,0.872920000000,0.393032000000,0.000202186700},
    {620,0.854449900000,0.381000000000,0.000190000000},
    {621,0.835084000000,0.368918400000,0.000174213300},
    {622,0.814946000000,0.356827200000,0.000155640000},
    {623,0.794186000000,0.344776800000,0.000135960000},
    {624,0.772954000000,0.332817600000,0.000116853300},
    {625,0.751400000000,0.321000000000,0.000100000000},
    {626,0.729583600000,0.309338100000,0.000086133330},
    {627,0.707588800000,0.297850400000,0.000074600000},
    {628,0.685602200000,0.286593600000,0.000065000000},
    {629,0.663810400000,0.275624500000,0.000056933330},
    {630,0.642400000000,0.265000000000,0.000049999990},
    {631,0.621514900000,0.254763200000,0.000044160000},
    {632,0.601113800000,0.244889600000,0.000039480000},
    {633,0.581105200000,0.235334400000,0.000035720000},
    {634,0.561397700000,0.226052800000,0.000032640000},
    {635,0.541900000000,0.217000000000,0.000030000000},
    {636,0.522599500000,0.208161600000,0.000027653330},
    {637,0.503546400000,0.199548800000,0.000025560000},
    {638,0.484743600000,0.191155200000,0.000023640000},
    {639,0.466193900000,0.182974400000,0.000021813330},
    {640,0.447900000000,0.175000000000,0.000020000000},
    {641,0.429861300000,0.167223500000,0.000018133330},
    {642,0.412098000000,0.159646400000,0.000016200000},
    {643,0.394644000000,0.152277600000,0.000014200000},
    {644,0.377533300000,0.145125900000,0.000012133330},
    {645,0.360800000000,0.138200000000,0.000010000000},
    {646,0.344456300000,0.131500300000,0.000007733333},
    {647,0.328516800000,0.125024800000,0.000005400000},
    {648,0.313019200000,0.118779200000,0.000003200000},
    {649,0.298001100000,0.112769100000,0.000001333333},
    {650,0.283500000000,0.107000000000,0.000000000000},
    {651,0.269544800000,0.101476200000,0.000000000000},
    {652,0.256118400000,0.096188640000,0.000000000000},
    {653,0.243189600000,0.091122960000,0.000000000000},
    {654,0.230727200000,0.086264850000,0.000000000000},
    {655,0.218700000000,0.081600000000,0.000000000000},
    {656,0.207097100000,0.077120640000,0.000000000000},
    {657,0.195923200000,0.072825520000,0.000000000000},
    {658,0.185170800000,0.068710080000,0.000000000000},
    {659,0.174832300000,0.064769760000,0.000000000000},
    {660,0.164900000000,0.061000000000,0.000000000000},
    {661,0.155366700000,0.057396210000,0.000000000000},
    {662,0.146230000000,0.053955040000,0.000000000000},
    {663,0.137490000000,0.050673760000,0.000000000000},
    {664,0.129146700000,0.047549650000,0.000000000000},
    {665,0.121200000000,0.044580000000,0.000000000000},
    {666,0.113639700000,0.041758720000,0.000000000000},
    {667,0.106465000000,0.039084960000,0.000000000000},
    {668,0.099690440000,0.036563840000,0.000000000000},
    {669,0.093330610000,0.034200480000,0.000000000000},
    {670,0.087400000000,0.032000000000,0.000000000000},
    {671,0.081900960000,0.029962610000,0.000000000000},
    {672,0.076804280000,0.028076640000,0.000000000000},
    {673,0.072077120000,0.026329360000,0.000000000000},
    {674,0.067686640000,0.024708050000,0.000000000000},
    {675,0.063600000000,0.023200000000,0.000000000000},
    {676,0.059806850000,0.021800770000,0.000000000000},
    {677,0.056282160000,0.020501120000,0.000000000000},
    {678,0.052971040000,0.019281080000,0.000000000000},
    {679,0.049818610000,0.018120690000,0.000000000000},
    {680,0.046770000000,0.017000000000,0.000000000000},
    {681,0.043784050000,0.015903790000,0.000000000000},
    {682,0.040875360000,0.014837180000,0.000000000000},
    {683,0.038072640000,0.013810680000,0.000000000000},
    {684,0.035404610000,0.012834780000,0.000000000000},
    {685,0.032900000000,0.011920000000,0.000000000000},
    {686,0.030564190000,0.011068310000,0.000000000000},
    {687,0.028380560000,0.010273390000,0.000000000000},
    {688,0.026344840000,0.009533311000,0.000000000000},
    {689,0.024452750000,0.008846157000,0.000000000000},
    {690,0.022700000000,0.008210000000,0.000000000000},
    {691,0.021084290000,0.007623781000,0.000000000000},
    {692,0.019599880000,0.007085424000,0.000000000000},
    {693,0.018237320000,0.006591476000,0.000000000000},
    {694,0.016987170000,0.006138485000,0.000000000000},
    {695,0.015840000000,0.005723000000,0.000000000000},
    {696,0.014790640000,0.005343059000,0.000000000000},
    {697,0.013831320000,0.004995796000,0.000000000000},
    {698,0.012948680000,0.004676404000,0.000000000000},
    {699,0.012129200000,0.004380075000,0.000000000000},
    {700,0.011359160000,0.004102000000,0.000000000000},
    {701,0.010629350000,0.003838453000,0.000000000000},
    {702,0.009938846000,0.003589099000,0.000000000000},
    {703,0.009288422000,0.003354219000,0.000000000000},
    {704,0.008678854000,0.003134093000,0.000000000000},
    {705,0.008110916000,0.002929000000,0.000000000000},
    {706,0.007582388000,0.002738139000,0.000000000000},
    {707,0.007088746000,0.002559876000,0.000000000000},
    {708,0.006627313000,0.002393244000,0.000000000000},
    {709,0.006195408000,0.002237275000,0.000000000000},
    {710,0.005790346000,0.002091000000,0.000000000000},
    {711,0.005409826000,0.001953587000,0.000000000000},
    {712,0.005052583000,0.001824580000,0.000000000000},
    {713,0.004717512000,0.001703580000,0.000000000000},
    {714,0.004403507000,0.001590187000,0.000000000000},
    {715,0.004109457000,0.001484000000,0.000000000000},
    {716,0.003833913000,0.001384496000,0.000000000000},
    {717,0.003575748000,0.001291268000,0.000000000000},
    {718,0.003334342000,0.001204092000,0.000000000000},
    {719,0.003109075000,0.001122744000,0.000000000000},
    {720,0.002899327000,0.001047000000,0.000000000000},
    {721,0.002704348000,0.000976589600,0.000000000000},
    {722,0.002523020000,0.000911108800,0.000000000000},
    {723,0.002354168000,0.000850133200,0.000000000000},
    {724,0.002196616000,0.000793238400,0.000000000000},
    {725,0.002049190000,0.000740000000,0.000000000000},
    {726,0.001910960000,0.000690082700,0.000000000000},
    {727,0.001781438000,0.000643310000,0.000000000000},
    {728,0.001660110000,0.000599496000,0.000000000000},
    {729,0.001546459000,0.000558454700,0.000000000000},
    {730,0.001439971000,0.000520000000,0.000000000000},
    {731,0.001340042000,0.000483913600,0.000000000000},
    {732,0.001246275000,0.000450052800,0.000000000000},
    {733,0.001158471000,0.000418345200,0.000000000000},
    {734,0.001076430000,0.000388718400,0.000000000000},
    {735,0.000999949300,0.000361100000,0.000000000000},
    {736,0.000928735800,0.000335383500,0.000000000000},
    {737,0.000862433200,0.000311440400,0.000000000000},
    {738,0.000800750300,0.000289165600,0.000000000000},
    {739,0.000743396000,0.000268453900,0.000000000000},
    {740,0.000690078600,0.000249200000,0.000000000000},
    {741,0.000640515600,0.000231301900,0.000000000000},
    {742,0.000594502100,0.000214685600,0.000000000000},
    {743,0.000551864600,0.000199288400,0.000000000000},
    {744,0.000512429000,0.000185047500,0.000000000000},
    {745,0.000476021300,0.000171900000,0.000000000000},
    {746,0.000442453600,0.000159778100,0.000000000000},
    {747,0.000411511700,0.000148604400,0.000000000000},
    {748,0.000382981400,0.000138301600,0.000000000000},
    {749,0.000356649100,0.000128792500,0.000000000000},
    {750,0.000332301100,0.000120000000,0.000000000000},
    {751,0.000309758600,0.000111859500,0.000000000000},
    {752,0.000288887100,0.000104322400,0.000000000000},
    {753,0.000269539400,0.000097335600,0.000000000000},
    {754,0.000251568200,0.000090845870,0.000000000000},
    {755,0.000234826100,0.000084800000,0.000000000000},
    {756,0.000219171000,0.000079146670,0.000000000000},
    {757,0.000204525800,0.000073858000,0.000000000000},
    {758,0.000190840500,0.000068916000,0.000000000000},
    {759,0.000178065400,0.000064302670,0.000000000000},
    {760,0.000166150500,0.000060000000,0.000000000000},
    {761,0.000155023600,0.000055981870,0.000000000000},
    {762,0.000144621900,0.000052225600,0.000000000000},
    {763,0.000134909800,0.000048718400,0.000000000000},
    {764,0.000125852000,0.000045447470,0.000000000000},
    {765,0.000117413000,0.000042400000,0.000000000000},
    {766,0.000109551500,0.000039561040,0.000000000000},
    {767,0.000102224500,0.000036915120,0.000000000000},
    {768,0.000095394450,0.000034448680,0.000000000000},
    {769,0.000089023900,0.000032148160,0.000000000000},
    {770,0.000083075270,0.000030000000,0.000000000000},
    {771,0.000077512690,0.000027991250,0.000000000000},
    {772,0.000072313040,0.000026113560,0.000000000000},
    {773,0.000067457780,0.000024360240,0.000000000000},
    {774,0.000062928440,0.000022724610,0.000000000000},
    {775,0.000058706520,0.000021200000,0.000000000000},
    {776,0.000054770280,0.000019778550,0.000000000000},
    {777,0.000051099180,0.000018452850,0.000000000000},
    {778,0.000047676540,0.000017216870,0.000000000000},
    {779,0.000044485670,0.000016064590,0.000000000000},
    {780,0.000041509940,0.000014990000,0.000000000000}
  };
  
  int loadSekonicCSV( const char *fn, Spectrum& spectrum ){
    FILE*fp = fopen(fn,"r");
    char line[1024];
    
    // ひどい話だが、フォーマットは固定であるという前提で読み込む.
    for(int i=0;i<115;i++){
      fgets( line, 1024, fp );
      if( feof( fp ) ) return -1;
    }
    
    // 分光データ本体(1nm刻み)
    spectrum.clear();
    for(int i=0;i<=780-380;i++){
      fgets( line, 1024, fp );
      double f = atof( strchr( line, ',' ) + 1 );
      spectrum.push_back( f );
    }
    
    fclose(fp);
    return 0;
  }

  Spectrum loadArray( double * f, double scale ){
    Spectrum s;
    s.resize( 401 );
    for( int i = 380; i <= 780; i ++ )
      s[i - 380] = f[i - 380] * scale;
    return s;
  }

  COLOR3::Color3 calcXYZ( Spectrum& spectrum, double scale ){
    double a,b,c;
    a = b = c = 0.;
    for(int i=0;i<=780-380;i++){
      a += CIE_XYZ31[i].x_ * spectrum[i] * scale;
      b += CIE_XYZ31[i].y_ * spectrum[i] * scale;
      c += CIE_XYZ31[i].z_ * spectrum[i] * scale;
    }
    return COLOR3::Color3( COLOR3::XYZ, a, b, c );
  }

  COLOR3::Color3 getXYZ( double lambda, double scale ){
    double a,b,c;
    a = b = c = 0.;
    int index   = (int)( lambda - 380.f );
    double alpha = lambda - (double)( index + 380 );
    double ialpha= 1.f - alpha;
    if( index >= 0 && index < 399 ){
      a = ( CIE_XYZ31[ index ].x_ * ialpha + CIE_XYZ31[ index + 1 ].x_ * alpha ) * scale;
      b = ( CIE_XYZ31[ index ].y_ * ialpha + CIE_XYZ31[ index + 1 ].y_ * alpha ) * scale;
      c = ( CIE_XYZ31[ index ].z_ * ialpha + CIE_XYZ31[ index + 1 ].z_ * alpha ) * scale;
    }
    return COLOR3::Color3( COLOR3::XYZ, a, b, c );
  }
  
  double getReflectance( const COLOR3::Color3 &color, double lambda ){
    /* COLOR3::Color3 xyz = color.get( COLOR3::XYZ );
    int index   = (int)( lambda - 380.f );
    double sum = CIE_XYZ31[index].x_+CIE_XYZ31[index].y_+CIE_XYZ31[index].z_;
    double ret = (CIE_XYZ31[index].x_ * xyz.a_ + CIE_XYZ31[index].y_ * xyz.b_ + CIE_XYZ31[index].z_ * xyz.c_)/sum;
    if( ret > 1. ) ret = 1.;
    return ret; */
    
    /*// R : 610  50
    // G : 546  50
    // B : 435 100
    double r = rgb.a_ * exp( - (lambda - 610.)*(lambda - 610.) / 2.* 50. * 50. ) / (sqrt(2. * M_PI) * 50.);
    double g = rgb.b_ * exp( - (lambda - 546.)*(lambda - 546.) / 2.* 50. * 50. ) / (sqrt(2. * M_PI) * 50.);
    double b = rgb.c_ * exp( - (lambda - 435.)*(lambda - 435.) / 2.*100. *100. ) / (sqrt(2. * M_PI) *100.);
    if( r+g+b > 1. )
      return 1.;
    return r+g+b; */
    COLOR3::Color3 rgb = color.get( COLOR3::RGB );
    /*double r = ( 560 < lambda                 ) ? rgb.a_ : 0.;
    double g = ( 495 < lambda && lambda < 595 ) ? rgb.b_ : 0.;
    double b = ( 335 < lambda && lambda < 535 ) ? rgb.c_ : 0.;
    double ret = r+g+b;
    return (ret>1.)?1.:ret; */
    /*
http://www.cs.utah.edu/~bes/papers/color/paper-node10.html
bin	white	cyan	magenta	yellow	red	green	blue
1	1.0000	0.9710	1.0000	0.0001	0.1012	0.0000	1.0000 // 380
2	1.0000	0.9426	1.0000	0.0000	0.0515	0.0000	1.0000 // 
3	0.9999	1.0007	0.9685	0.1088	0.0000	0.0273	0.8916 // 
4	0.9993	1.0007	0.2229	0.6651	0.0000	0.7937	0.3323 // 
5	0.9992	1.0007	0.0000	1.0000	0.0000	1.0000	0.0000 // 
6	0.9998	1.0007	0.0458	1.0000	0.0000	0.9418	0.0000 // 
7	1.0000	0.1564	0.8369	0.9996	0.8325	0.1719	0.0003 // 
8	1.0000	0.0000	1.0000	0.9586	1.0149	0.0000	0.0369 // 
9	1.0000	0.0000	1.0000	0.9685	1.0149	0.0000	0.0483 // 
10	1.0000	0.0000	0.9959	0.9840	1.0149	0.0025	0.0496 // 720
     */
    double white[]  = {1,1,0.9999,0.9993,0.9992,0.9998,1,1,1,1 };
    double cyan[]   = {0.971,0.9426,1.0007,1.0007,1.0007,1.0007,0.1564,0,0,0};
    double magenta[]= {1,1,0.9685,0.2229,0,0.0458,0.8369,1,1,0.9959};
    double yellow[] = {0.0001,0,0.1088,0.6651,1,1,0.9996,0.9586,0.9685,0.984};
    double red[]    = {0.1012,0.0515,0,0,0,0,0.8325,1.0149,1.0149,1.0149};
    double green[]  = {0,0,0.0273,0.7937,1,0.9418,0.1719,0,0,0.0025};
    double blue[]   = {1,1,0.8916,0.3323,0,0,0.0003,0.0369,0.0483,0.0496};

    int index = (lambda - 380.) * 10. / (720. - 380.);
    if( index > 9 ) index = 9;
    if( index < 0 ) index = 0;
    double R = rgb.a_;
    double G = rgb.b_;
    double B = rgb.c_;

    double ret = 0.;
    if( R <= G && R <= B ) {
      //printf("case1\n");
      ret += R * white[index];
      if( G <= B ){
        ret += (G - R) * cyan[ index ];
        ret += (B - G) * blue[ index ];
      } else {
        ret += (B - R) * cyan [ index ];
        ret += (G - B) * green[ index ];
      }
    } else if( G <= R && G <= B ) {
      //printf("case2\n");
      ret += G * white[index];
      if(R <= B){
        ret += (R - G) * magenta[ index ];
        ret += (B - R) * blue[ index ];
      }else{
        ret += (B - G) * magenta[ index ];
        ret += (R - B) * red[ index ];
      }
    } else if( B <= R && B <= G ) {
      //printf("case3\n");
      ret += B * white[index];
      if( R <= G ){
        ret += (R - B) * yellow[ index ];
        ret += (G - R) * green[ index ];
      }else{
        ret += (G - B) * yellow[ index ];
        ret += (R - G) * red[ index ];
      }
    } else {
      assert(false);
    }
    return ret;
  }
  double getLuminance( const COLOR3::Color3 &color, double lambda ){
    /*/COLOR3::Color3 xyz = color.get( COLOR3::XYZ );
    int index   = (int)( lambda - 380.f );
    return CIE_XYZ31[index].x_ * xyz.a_ + CIE_XYZ31[index].y_ * xyz.b_ + CIE_XYZ31[index].z_ * xyz.c_; */
    COLOR3::Color3 xyz = color.get( COLOR3::XYZ );
    double scale = std::max( std::max( xyz.a_, xyz.b_ ), xyz.c_ );
    if( scale <= 0. )
      return 0.;
    double spectrum = getReflectance( COLOR3::Color3( COLOR3::XYZ, xyz.a_ / scale, xyz.b_ / scale, xyz.c_ / scale ) , lambda );
    return spectrum * scale;
  }

  void initXyzPdf(void){
    for(int i=0;i<400;i++){
      CIE_XYZ31_sum.x_ += CIE_XYZ31[i].x_;
      CIE_XYZ31_sum.y_ += CIE_XYZ31[i].y_;
      CIE_XYZ31_sum.z_ += CIE_XYZ31[i].z_;
    }
  }
  
  double planckBlackBody(
    const double &T,        // temperature (Kelvin)
    const double &lambda ) {   // wavelength (meter)
    static const double h = 6.62606896e-34;   // Plank constant
    static const double c = 2.99792458e+8;    // Speed of light
    static const double k = 1.38064880e-23;   // Boltzmann constant
    static const double arg1 = 2 * M_PI * h * c * c;
    static const double arg2 = ( h * c ) / k;
    return (arg1 * pow(lambda, -5.0)) / (exp(arg2 / (lambda * T)) - 1.0);
  }
  
  double normalizedPlanck( double T, double lambda ){ // K, nm
    static const double h = 6.62606896e-34;   // Plank constant
    static const double c = 2.99792458e+8;    // Speed of light
    static const double k = 1.38064880e-23;   // Boltzmann constant
    lambda = lambda / 1e9; // nm to m.
    double peakLambda = h * c / ( 4.97 * k * T );
    return planckBlackBody( T, lambda ) / planckBlackBody( T, peakLambda );
  }
}



#endif


